qnet.algebra package
====================

.. automodule:: qnet.algebra
    


    Submodules:

    .. toctree::
       :maxdepth: 1

       qnet.algebra.abstract_algebra
       qnet.algebra.circuit_algebra
       qnet.algebra.hilbert_space_algebra
       qnet.algebra.matrix_algebra
       qnet.algebra.operator_algebra
       qnet.algebra.ordering
       qnet.algebra.pattern_matching
       qnet.algebra.permutations
       qnet.algebra.singleton
       qnet.algebra.state_algebra
       qnet.algebra.super_operator_algebra



    ``__all__``: :class:`ABCD <qnet.algebra.circuit_algebra.ABCD>`, :class:`Adjoint <qnet.algebra.operator_algebra.Adjoint>`, :exc:`AlgebraError <qnet.algebra.abstract_algebra.AlgebraError>`, :exc:`AlgebraException <qnet.algebra.abstract_algebra.AlgebraException>`, :exc:`BadLiouvillianError <qnet.algebra.super_operator_algebra.BadLiouvillianError>`, :class:`BasisKet <qnet.algebra.state_algebra.BasisKet>`, :exc:`BasisNotSetError <qnet.algebra.hilbert_space_algebra.BasisNotSetError>`, :class:`Bra <qnet.algebra.state_algebra.Bra>`, :class:`BraKet <qnet.algebra.state_algebra.BraKet>`, :data:`CIdentity <CIdentity>`, :class:`CPermutation <qnet.algebra.circuit_algebra.CPermutation>`, :exc:`CannotConvertToABCD <qnet.algebra.circuit_algebra.CannotConvertToABCD>`, :exc:`CannotConvertToSLH <qnet.algebra.circuit_algebra.CannotConvertToSLH>`, :exc:`CannotEliminateAutomatically <qnet.algebra.circuit_algebra.CannotEliminateAutomatically>`, :exc:`CannotSimplify <qnet.algebra.abstract_algebra.CannotSimplify>`, :exc:`CannotSymbolicallyDiagonalize <qnet.algebra.super_operator_algebra.CannotSymbolicallyDiagonalize>`, :exc:`CannotVisualize <qnet.algebra.circuit_algebra.CannotVisualize>`, :class:`Circuit <qnet.algebra.circuit_algebra.Circuit>`, :class:`CircuitSymbol <qnet.algebra.circuit_algebra.CircuitSymbol>`, :data:`CircuitZero <CircuitZero>`, :class:`CoherentStateKet <qnet.algebra.state_algebra.CoherentStateKet>`, :class:`Concatenation <qnet.algebra.circuit_algebra.Concatenation>`, :class:`Create <qnet.algebra.operator_algebra.Create>`, :class:`Destroy <qnet.algebra.operator_algebra.Destroy>`, :class:`Displace <qnet.algebra.operator_algebra.Displace>`, :class:`Expression <qnet.algebra.abstract_algebra.Expression>`, :func:`FB <qnet.algebra.circuit_algebra.FB>`, :class:`Feedback <qnet.algebra.circuit_algebra.Feedback>`, :data:`FullSpace <FullSpace>`, :class:`HilbertSpace <qnet.algebra.hilbert_space_algebra.HilbertSpace>`, :data:`II <II>`, :data:`IdentityOperator <IdentityOperator>`, :data:`IdentitySuperOperator <IdentitySuperOperator>`, :func:`ImAdjoint <qnet.algebra.matrix_algebra.ImAdjoint>`, :func:`ImMatrix <qnet.algebra.matrix_algebra.Im>`, :exc:`IncompatibleBlockStructures <qnet.algebra.circuit_algebra.IncompatibleBlockStructures>`, :class:`Jminus <qnet.algebra.operator_algebra.Jminus>`, :func:`Jmjmcoeff <qnet.algebra.operator_algebra.Jmjmcoeff>`, :func:`Jpjmcoeff <qnet.algebra.operator_algebra.Jpjmcoeff>`, :class:`Jplus <qnet.algebra.operator_algebra.Jplus>`, :class:`Jz <qnet.algebra.operator_algebra.Jz>`, :func:`Jzjmcoeff <qnet.algebra.operator_algebra.Jzjmcoeff>`, :class:`Ket <qnet.algebra.state_algebra.Ket>`, :class:`KetBra <qnet.algebra.state_algebra.KetBra>`, :class:`KetPlus <qnet.algebra.state_algebra.KetPlus>`, :class:`KetSymbol <qnet.algebra.state_algebra.KetSymbol>`, :class:`LocalKet <qnet.algebra.state_algebra.LocalKet>`, :class:`LocalOperator <qnet.algebra.operator_algebra.LocalOperator>`, :func:`LocalProjector <qnet.algebra.operator_algebra.LocalProjector>`, :class:`LocalSigma <qnet.algebra.operator_algebra.LocalSigma>`, :class:`LocalSpace <qnet.algebra.hilbert_space_algebra.LocalSpace>`, :class:`MatchDict <qnet.algebra.pattern_matching.MatchDict>`, :class:`Matrix <qnet.algebra.matrix_algebra.Matrix>`, :exc:`NonSquareMatrix <qnet.algebra.matrix_algebra.NonSquareMatrix>`, :class:`NullSpaceProjector <qnet.algebra.operator_algebra.NullSpaceProjector>`, :class:`Operation <qnet.algebra.abstract_algebra.Operation>`, :class:`Operator <qnet.algebra.operator_algebra.Operator>`, :class:`OperatorOperation <qnet.algebra.operator_algebra.OperatorOperation>`, :class:`OperatorPlus <qnet.algebra.operator_algebra.OperatorPlus>`, :class:`OperatorPlusMinusCC <qnet.algebra.operator_algebra.OperatorPlusMinusCC>`, :class:`OperatorSymbol <qnet.algebra.operator_algebra.OperatorSymbol>`, :class:`OperatorTimes <qnet.algebra.operator_algebra.OperatorTimes>`, :class:`OperatorTimesKet <qnet.algebra.state_algebra.OperatorTimesKet>`, :class:`OperatorTrace <qnet.algebra.operator_algebra.OperatorTrace>`, :exc:`OverlappingSpaces <qnet.algebra.state_algebra.OverlappingSpaces>`, :func:`P_sigma <qnet.algebra.circuit_algebra.P_sigma>`, :class:`Pattern <qnet.algebra.pattern_matching.Pattern>`, :class:`Phase <qnet.algebra.operator_algebra.Phase>`, :class:`ProductSpace <qnet.algebra.hilbert_space_algebra.ProductSpace>`, :class:`PseudoInverse <qnet.algebra.operator_algebra.PseudoInverse>`, :func:`ReAdjoint <qnet.algebra.matrix_algebra.ReAdjoint>`, :func:`ReMatrix <qnet.algebra.matrix_algebra.Re>`, :data:`SCALAR_TYPES <SCALAR_TYPES>`, :class:`SLH <qnet.algebra.circuit_algebra.SLH>`, :class:`SPost <qnet.algebra.super_operator_algebra.SPost>`, :class:`SPre <qnet.algebra.super_operator_algebra.SPre>`, :class:`ScalarTimesKet <qnet.algebra.state_algebra.ScalarTimesKet>`, :class:`ScalarTimesOperator <qnet.algebra.operator_algebra.ScalarTimesOperator>`, :class:`ScalarTimesSuperOperator <qnet.algebra.super_operator_algebra.ScalarTimesSuperOperator>`, :class:`SeriesInverse <qnet.algebra.circuit_algebra.SeriesInverse>`, :class:`SeriesProduct <qnet.algebra.circuit_algebra.SeriesProduct>`, :class:`SingleOperatorOperation <qnet.algebra.operator_algebra.SingleOperatorOperation>`, :exc:`SpaceTooLargeError <qnet.algebra.state_algebra.SpaceTooLargeError>`, :class:`Squeeze <qnet.algebra.operator_algebra.Squeeze>`, :class:`SuperAdjoint <qnet.algebra.super_operator_algebra.SuperAdjoint>`, :class:`SuperCommutativeHSOrder <qnet.algebra.super_operator_algebra.SuperCommutativeHSOrder>`, :class:`SuperOperator <qnet.algebra.super_operator_algebra.SuperOperator>`, :class:`SuperOperatorOperation <qnet.algebra.super_operator_algebra.SuperOperatorOperation>`, :class:`SuperOperatorPlus <qnet.algebra.super_operator_algebra.SuperOperatorPlus>`, :class:`SuperOperatorSymbol <qnet.algebra.super_operator_algebra.SuperOperatorSymbol>`, :class:`SuperOperatorTimes <qnet.algebra.super_operator_algebra.SuperOperatorTimes>`, :class:`SuperOperatorTimesOperator <qnet.algebra.super_operator_algebra.SuperOperatorTimesOperator>`, :class:`TensorKet <qnet.algebra.state_algebra.TensorKet>`, :data:`TrivialKet <TrivialKet>`, :data:`TrivialSpace <TrivialSpace>`, :exc:`UnequalSpaces <qnet.algebra.state_algebra.UnequalSpaces>`, :exc:`WrongCDimError <qnet.algebra.circuit_algebra.WrongCDimError>`, :exc:`WrongSignatureError <qnet.algebra.abstract_algebra.WrongSignatureError>`, :func:`X <qnet.algebra.operator_algebra.X>`, :func:`Y <qnet.algebra.operator_algebra.Y>`, :func:`Z <qnet.algebra.operator_algebra.Z>`, :data:`ZeroKet <ZeroKet>`, :data:`ZeroOperator <ZeroOperator>`, :data:`ZeroSuperOperator <ZeroSuperOperator>`, :func:`adjoint <qnet.algebra.operator_algebra.adjoint>`, :func:`all_symbols <qnet.algebra.abstract_algebra.all_symbols>`, :func:`anti_commutator <qnet.algebra.super_operator_algebra.anti_commutator>`, :func:`block_matrix <qnet.algebra.matrix_algebra.block_matrix>`, :func:`cid <qnet.algebra.circuit_algebra.circuit_identity>`, :data:`cid_1 <cid_1>`, :func:`circuit_identity <qnet.algebra.circuit_algebra.circuit_identity>`, :func:`commutator <qnet.algebra.super_operator_algebra.commutator>`, :func:`connect <qnet.algebra.circuit_algebra.connect>`, :func:`create_operator_pm_cc <qnet.algebra.operator_algebra.create_operator_pm_cc>`, :func:`decompose_space <qnet.algebra.operator_algebra.decompose_space>`, :func:`diagm <qnet.algebra.matrix_algebra.diagm>`, :func:`eval_adiabatic_limit <qnet.algebra.circuit_algebra.eval_adiabatic_limit>`, :func:`expand_operator_pm_cc <qnet.algebra.operator_algebra.expand_operator_pm_cc>`, :func:`extra_binary_rules <qnet.algebra.abstract_algebra.extra_binary_rules>`, :func:`extra_rules <qnet.algebra.abstract_algebra.extra_rules>`, :func:`extract_signal <qnet.algebra.circuit_algebra.extract_signal>`, :func:`extract_signal_circuit <qnet.algebra.circuit_algebra.extract_signal_circuit>`, :func:`factor_coeff <qnet.algebra.operator_algebra.factor_coeff>`, :func:`factor_for_trace <qnet.algebra.operator_algebra.factor_for_trace>`, :func:`getABCD <qnet.algebra.circuit_algebra.getABCD>`, :func:`get_coeffs <qnet.algebra.operator_algebra.get_coeffs>`, :func:`get_common_block_structure <qnet.algebra.circuit_algebra.get_common_block_structure>`, :func:`hstackm <qnet.algebra.matrix_algebra.hstackm>`, :func:`identity_matrix <qnet.algebra.matrix_algebra.identity_matrix>`, :func:`lindblad <qnet.algebra.super_operator_algebra.lindblad>`, :func:`liouvillian <qnet.algebra.super_operator_algebra.liouvillian>`, :func:`liouvillian_normal_form <qnet.algebra.super_operator_algebra.liouvillian_normal_form>`, :func:`map_signals <qnet.algebra.circuit_algebra.map_signals>`, :func:`map_signals_circuit <qnet.algebra.circuit_algebra.map_signals_circuit>`, :func:`match_pattern <qnet.algebra.pattern_matching.match_pattern>`, :func:`move_drive_to_H <qnet.algebra.circuit_algebra.move_drive_to_H>`, :func:`no_instance_caching <qnet.algebra.abstract_algebra.no_instance_caching>`, :func:`no_rules <qnet.algebra.abstract_algebra.no_rules>`, :func:`pad_with_identity <qnet.algebra.circuit_algebra.pad_with_identity>`, :func:`pattern <qnet.algebra.pattern_matching.pattern>`, :func:`pattern_head <qnet.algebra.pattern_matching.pattern_head>`, :func:`permutation_matrix <qnet.algebra.matrix_algebra.permutation_matrix>`, :func:`prepare_adiabatic_limit <qnet.algebra.circuit_algebra.prepare_adiabatic_limit>`, :func:`scalar_free_symbols <qnet.algebra.operator_algebra.scalar_free_symbols>`, :func:`set_union <qnet.algebra.abstract_algebra.set_union>`, :func:`simplify <qnet.algebra.abstract_algebra.simplify>`, :func:`simplify_scalar <qnet.algebra.operator_algebra.simplify_scalar>`, :func:`space <qnet.algebra.operator_algebra.space>`, :func:`substitute <qnet.algebra.abstract_algebra.substitute>`, :func:`temporary_instance_cache <qnet.algebra.abstract_algebra.temporary_instance_cache>`, :func:`try_adiabatic_elimination <qnet.algebra.circuit_algebra.try_adiabatic_elimination>`, :func:`vstackm <qnet.algebra.matrix_algebra.vstackm>`, :func:`wc <qnet.algebra.pattern_matching.wc>`, :func:`zerosm <qnet.algebra.matrix_algebra.zerosm>`

